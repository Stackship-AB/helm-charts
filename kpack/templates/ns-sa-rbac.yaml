apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.jobNamespace }}
  labels:
    app.kubernetes.io/name: {{ include "kpack-installer.fullname" . }}
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-20"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceAccountName }}
  namespace: {{ .Values.jobNamespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-15"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
# Tightened ClusterRole: enough to apply/delete the kpack release manifest.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "kpack-installer.fullname" . }}-applier
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-12"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
  # Core resources (cluster & namespaced) needed by release.yaml
  - apiGroups: [""]
    resources: ["namespaces","serviceaccounts","secrets","configmaps","services"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # Workloads
  - apiGroups: ["apps"]
    resources: ["deployments","statefulsets","daemonsets","replicasets"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # kpack CRs (cluster and namespaced)
  - apiGroups: ["kpack.io"]
    resources: ["*"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # CRDs
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # Webhooks
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations","validatingwebhookconfigurations"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # RBAC bindings created by release.yaml
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["rolebindings","clusterrolebindings"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # Allow creating/updating Roles/ClusterRoles that contain permissions we don't currently hold
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles","clusterroles"]
    verbs: ["get","list","watch","create","update","patch","delete","escalate","bind"]
  # ServiceMonitor (if present in some distros) - safe optional
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["servicemonitors"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # PodDisruptionBudget (sometimes used)
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # PriorityClasses referenced by release.yaml
  - apiGroups: ["scheduling.k8s.io"]
    resources: ["priorityclasses"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  # Events are helpful for status, not strictly required
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.clusterRoleBindingName }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-delete
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "kpack-installer.fullname" . }}-applier
subjects:
  - kind: ServiceAccount
    name: {{ .Values.serviceAccountName }}
    namespace: {{ .Values.jobNamespace }}
